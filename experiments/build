#!/bin/bash

SCRIPT=$(readlink -f $0)
SCRIPT_PATH=$(dirname "${SCRIPT}")
PARENT_PATH=$(dirname "${SCRIPT_PATH}")

source "${SCRIPT_PATH}/common.sh"

experiment_modes=('perf' 'func')

CONFIG_FILES=("${SCRIPT_PATH}/experiment.cfg")

log_file="${SCRIPT_PATH}/log/build.log"

mkdir -p "${SCRIPT_PATH}/log"
chmod -f g=u "${SCRIPT_PATH}/log"
rm -f ${log_file}
touch ${log_file}
chmod -f g=u ${log_file}

# flags for command options
opt_all=0
opt_data_tools=0
opt_prepare_system=''
opt_system=''
opt_experiment=''
opt_no_func=1

function usage {
    echo "Usage: build [Options]
	  
Options:
  -h, --help				print this message.
  -a, --all				build all dependencies for experiments. (DEFAULT OPTION)
  -t, --data-tools			build data-tools.
  -p, --prepare-system <sys1,sys2,...>	prepare systems. 
  -s, --system <sys1,sys2,...>		build excutable for systems.
  -e, --experiment <exp1,exp2,...> 	produce data and compile queries for experimeents.

Examples:
  (1) build
	Equals to 'build -a' or 'build -t -p all -s all -e all'. Build all dependencies for experiments.

  (2) build -t -p dbtoaster
	Build data-tools, then compile and assembly dbtoaster. 

  (3) build -s dbtoaster,flink 
	Build exectuables for system dbtoaster and flink.

  (4) build -s flink -e length3 
	Prepare data and compile query of experiment 'length3', then build executable for system flink.
"
    exit 1
}

if [[ $# -eq 0 ]]; then
    # 'build' is equals to 'build -a' or 'build --all'
    opt_all=1
else
    opt_args=$(getopt -a -n build -o hatp:s:e:n --long help,all,data-tools,prepare-system:,system:,experiment:,no-func -- "$@")
    if [[ $? -ne 0 ]]; then
        usage
    fi

    eval set -- "${opt_args}"
    while :; do
        case $1 in
            -h | --help) usage ;;
            -a | --all) opt_all=1; shift ;;
            -t | --data-tools) opt_data_tools=1; shift ;;
            -p | --prepare-system) opt_prepare_system=$2; shift 2 ;;
            -s | --system) opt_system=$2; shift 2 ;;
            -e | --experiment) opt_experiment=$2; shift 2 ;;
            --) shift; break ;;
            *) echo "Unexpected option: $1."; usage ;;
        esac
    done
fi

if [[ ${opt_all} -eq 1 ]]; then
    if [[ ${opt_data_tools} -eq 1 ]]; then
        echo "Warning: option -a already implies option -t."
    fi

    if [[ -n ${opt_prepare_system} ]]; then
        echo "Warning: option -a already implies option -p all."
    fi

    if [[ -n ${opt_system} ]]; then
        echo "Warning: option -a already implies option -s all."
    fi

    if [[ -n ${opt_experiment} ]]; then
        echo "Warning: option -a already implies option -e all."
    fi

    # option -a equals to -t -p all -s all -e all
    opt_data_tools=1
    opt_prepare_system='all'
    opt_system='all'
    opt_experiment='all'
fi

# flags for handling cases that dbtoaster_cpp is set in -p option
contains_dbtoaster=0
contains_dbtoaster_cpp=0

# check if system names in option -p is valid
if [[ -n ${opt_prepare_system} ]]; then
    if [[ ${opt_prepare_system} == 'all' ]]; then
        opt_prepare_system_names=${valid_system_names[@]}
        contains_dbtoaster=1
        contains_dbtoaster_cpp=1
    else
        opt_prepare_system_names=$(echo ${opt_prepare_system} | awk -F, '{for(i=1;i<=NF;i++) printf "%s%s",$i,ORS}')
        for system_name in ${opt_prepare_system_names[@]}; do
            is_valid=0
            for name in ${valid_system_names[@]}; do
                if [[ ${system_name} == ${name} ]]; then
                    is_valid=1
                fi
            done

            if [[ "${system_name}" = "dbtoaster" ]]; then
                contains_dbtoaster=1
            fi

            if [[ "${system_name}" = "dbtoaster_cpp" ]]; then
                contains_dbtoaster_cpp=1
            fi

            if [[ ${is_valid} -eq 0 ]]; then
                echo "Unexpected system name ${system_name} in option -p"
                usage
            fi
        done
    fi
fi

# if dbtoaster_cpp is set in -p but dbtoaster is not set, prepare dbtoaster instead
if [[ ${contains_dbtoaster_cpp} -eq 1 && ${contains_dbtoaster} -eq 0 ]]; then
    opt_prepare_system_names+=('dbtoaster')
    opt_prepare_system_names=( ${opt_prepare_system_names[@]/dbtoaster_cpp} )
# if dbtoaster_cpp and dbtoaster are both set, drop dbtoaster_cpp because dbtoaster will do the job
elif [[ ${contains_dbtoaster_cpp} -eq 1 && ${contains_dbtoaster} -eq 1 ]]; then
    opt_prepare_system_names=( ${opt_prepare_system_names[@]/dbtoaster_cpp} )
fi

# check if system names in option -s is valid
if [[ -n ${opt_system} ]]; then
    if [[ ${opt_system} == 'all' ]]; then
        opt_system_names=${valid_system_names[@]}
    else
        opt_system_names=$(echo ${opt_system} | awk -F, '{for(i=1;i<=NF;i++) printf "%s%s",$i,ORS}')
        for system_name in ${opt_system_names[@]}; do
            is_valid=0
            for name in ${valid_system_names[@]}; do
                if [[ ${system_name} == ${name} ]]; then
                    is_valid=1
                fi
            done

            if [[ ${is_valid} -eq 0 ]]; then
                echo "Unexpected system name ${system_name} in option -s"
                usage
            fi
        done
    fi
fi

# check if experiment names in option -e is valid
if [[ -n ${opt_experiment} ]]; then
    if [[ ${opt_experiment} == 'all' ]]; then
        opt_experiment_names=${valid_experiment_names[@]}
    else
        opt_experiment_names=$(echo ${opt_experiment} | awk -F, '{for(i=1;i<=NF;i++) printf "%s%s",$i,ORS}')
        for experiment_name in ${opt_experiment_names[@]}; do
            is_valid=0
            for name in ${valid_experiment_names[@]}; do
                if [[ ${experiment_name} == ${name} ]]; then
                    is_valid=1
                fi
            done

            if [[ ${is_valid} -eq 0 ]]; then
                echo "Unexpected experiment name ${experiment_name} in option -e"
                usage
            fi
        done
    fi
fi

if [[ ${opt_data_tools} -eq 1 ]]; then
    echo "begin to build data-tools." >> ${log_file}
    bash ${SCRIPT_PATH}/data/prepare-tools.sh
    assert "build data-tools failed."
    echo "finish building data-tools." >> ${log_file}
fi

for system in ${opt_prepare_system_names[@]}; do
    echo "begin to prepare system ${system}" >> ${log_file}
    bash ${SCRIPT_PATH}/${system}/prepare-system.sh
    assert "prepare system ${system} failed."
    echo "finish preparing system ${system}" >> ${log_file}
done

for experiment in ${opt_experiment_names[@]}; do
    if [[ ${experiment} != snb* ]]; then
        # snb experiments don't need to produce data
        echo "begin to produce data for experiment ${experiment}" >> ${log_file}
        bash ${SCRIPT_PATH}/data/produce-data.sh ${experiment}
        assert "produce data for experiment ${experiment} failed."
        echo "finish producing data for experiment ${experiment}" >> ${log_file}
    fi

    # use valid_system_names instead of opt_system_names, or the data will not be updated with 'build -e all; build -s all'
    for system in ${valid_system_names[@]}; do
        for experiment_mode in ${experiment_modes[@]}; do
            if [[ ${experiment} != snb* ]]; then
                bash ${SCRIPT_PATH}/${system}/prepare-data.sh ${experiment} ${experiment_mode} ${SCRIPT_PATH}/data/${experiment}/${experiment_mode}
                assert "prepare data for system ${system} in experiment ${experiment} on mode ${experiment_mode} failed."
            else
                snb_data_path=$(prop 'snb.data.base.path')
                bash ${SCRIPT_PATH}/${system}/prepare-data.sh ${experiment} ${experiment_mode} ${snb_data_path}/${system}/${experiment}
                assert "prepare data for system ${system} in experiment ${experiment} on mode ${experiment_mode} failed."
            fi
        done

        bash ${SCRIPT_PATH}/${system}/prepare-query.sh ${experiment}
        assert "prepare query for system ${system} experiment ${experiment} failed."
    done
done

for system in ${opt_system_names[@]}
do
    echo "begin to build executable for system ${system}" >> ${log_file}
    bash ${SCRIPT_PATH}/${system}/build.sh "${opt_no_func}"
    assert "build executable for system ${system} failed."
    echo "finish building executable for system ${system}" >> ${log_file}
done

